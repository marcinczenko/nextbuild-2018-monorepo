{"data":{"site":{"siteMetadata":{"title":"Confluenza","editBaseUrl":"https://github.com/Charterhouse/confluenza/blob/master"}},"doc":{"html":"<h2 id=\"more\"><a href=\"#more\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>More</h2>\n<p>You can easily add more content to you external content right in the original source file.</p>","fileAbsolutePath":"/Users/mczenko/Desktop/nextbuild-2018/nextbuild-2018-monorepo/workspaces/homepage/src/pages/developer-documentation/MakingConfluenzaYours.md","frontmatter":{"title":"Making Confluenza Yours","content":{"childMarkdownRemark":{"html":"<h1 id=\"this-top-level-header-will-be-ignored\"><a href=\"#this-top-level-header-will-be-ignored\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>This top level header will be ignored</h1>\n<p>Even in its very early release Confluenza is still easy to adjust so that it\nfits the needs of your project.</p>\n<h2 id=\"frontmatter\"><a href=\"#frontmatter\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Frontmatter</h2>\n<p>Every markdown file that is supposed to be rendered by Confluenza needs to have a so called <code class=\"language-text\">frontmatter</code>\ncontaining important metadata like <code class=\"language-text\">title</code>, <code class=\"language-text\">path</code> and <code class=\"language-text\">tag</code>.</p>\n<blockquote>\n<p>Markdown files without frontmatter will be ignored by Confluenza unless they serve as the <em>external content</em> for other files (see later in this document)</p>\n</blockquote>\n<p>The frontmatter of a Confluenza file normally looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">---\npath: /components/user-login\ntitle: User Login\ntag: component\n---</code></pre></div>\n<p>The <code class=\"language-text\">path</code> will become the part of the URL of the page and <code class=\"language-text\">title</code> is self-explaining.\nThe <code class=\"language-text\">tag</code> field needs a bit more in depth explanation.</p>\n<h2 id=\"tags\"><a href=\"#tags\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tags</h2>\n<p>By <em>tagging</em> your file it will automatically be\nassigned to one of the groups displayed in the navigation menu. For example, the Confluenza page\nhas three categories: <em>User Documentation</em>, <em>Developer Documentation</em>, and <em>Other Documents</em>.\nEach of these categories is associated a tag: <code class=\"language-text\">user-documentation</code>, <code class=\"language-text\">developer-documentation</code>, and\n<code class=\"language-text\">other</code> respectively. The tags are currently tightly coupled with the Confluenza source code in\nthe <code class=\"language-text\">src/components/navigation/Navigation.js</code> file.</p>\n<blockquote>\n<p>We will make Confluenza more intelligent about tags in the future.</p>\n</blockquote>\n<p>For the current set of supported tags you will find the following two code fragments in the\nabove mentioned source file:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Navigation</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    otherDeltas<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    userDocumentationDeltas<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    developerDocumentationDeltas<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span></code></pre></div>\n<p>and then in the constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ...</span>\n<span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>navigationGroups <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createNavigationGroupForTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      title<span class=\"token punctuation\">:</span> <span class=\"token string\">'User Documentation'</span><span class=\"token punctuation\">,</span>\n      tag<span class=\"token punctuation\">:</span> <span class=\"token string\">'user-documentation'</span><span class=\"token punctuation\">,</span>\n      deltaGroupName<span class=\"token punctuation\">:</span> <span class=\"token string\">'userDocumentation'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createNavigationGroupForTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Developer Documentation'</span><span class=\"token punctuation\">,</span>\n      tag<span class=\"token punctuation\">:</span> <span class=\"token string\">'developer-documentation'</span><span class=\"token punctuation\">,</span>\n      deltaGroupName<span class=\"token punctuation\">:</span> <span class=\"token string\">'developerDocumentation'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createNavigationGroupForTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Other Documents'</span><span class=\"token punctuation\">,</span>\n      tag<span class=\"token punctuation\">:</span> <span class=\"token string\">'other'</span><span class=\"token punctuation\">,</span>\n      deltaGroupName<span class=\"token punctuation\">:</span> <span class=\"token string\">'other'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>Let's say you would like to add another category <em>Components</em> identified by tag <code class=\"language-text\">component</code>.\nYou then first need to extend the state object shown above as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  otherDeltas<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  userDocumentationDeltas<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  developerDocumentationDeltas<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  componentsDeltas<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and add the following to the constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createNavigationGroupForTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Components'</span><span class=\"token punctuation\">,</span>\n  tag<span class=\"token punctuation\">:</span> <span class=\"token string\">'component'</span><span class=\"token punctuation\">,</span>\n  deltaGroupName<span class=\"token punctuation\">:</span> <span class=\"token string\">'components'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Notice that the <code class=\"language-text\">deltaGroupName</code> corresponds to the name of the attribute in the state.\nSo if <code class=\"language-text\">deltaGroupName</code> is <code class=\"language-text\">components</code> then the attribute in the state must be named <code class=\"language-text\">componentsDeltas</code>.</p>\n<h2 id=\"external-content\"><a href=\"#external-content\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>External content</h2>\n<p>The frontmatter may also contain an optional field <code class=\"language-text\">content</code> allowing you to refer to the content placed in a separate markdown file.</p>\n<p>The <code class=\"language-text\">content</code> field indicates that the intended content of this markdown file is to be found in\nanother file, as indicated by the value of the <code class=\"language-text\">content</code> field.</p>\n<p>For example, the page you are reading now is the external content for\nfile <code class=\"language-text\">WorkingWithExternalContent.md</code> having the following frontmatter:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">---\npath: /developer-documentation/making-confluenza-yours\ntitle: Making Confluenza Yours\ntag: developer-documentation\ncontent: ExternalContent.md\n---</code></pre></div>\n<h3 id=\"how-does-it-actually-work\"><a href=\"#how-does-it-actually-work\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How does it actually work</h3>\n<p>Confluenza is based on <a href=\"https://www.gatsbyjs.org\">Gatsby</a>.\nThe <a href=\"https://www.npmjs.com/package/gatsby-transformer-remark\">gatsby-transformer-remark</a> plugin\nthat is used by Confluenza to process the markdown files, recognizes the <code class=\"language-text\">content</code> field in the <code class=\"language-text\">frontmatter</code> and if it can resolve the file indicated by its value,\nit will process it as a regular markdown file and the result of this processing will be captured in the\n<code class=\"language-text\">content</code> field of the corresponding Gatsby node. Below is an example of the remark node corresponding to the <code class=\"language-text\">MakingConfluenzaYours.md</code> (the file of which external content you are now reading):</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"fileAbsolutePath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/Users/.../confluenza/src/pages/developer-documentation/MakingConfluenzaYours.md\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"headings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"More\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"frontmatter\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Making Confluenza Yours\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/developer-documentation/making-confluenza-yours\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"content\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"childMarkdownRemark\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"fileAbsolutePath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/Users/.../confluenza/src/pages/developer-documentation/ExternalContent.md\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"headings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n              <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Frontmatter\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n              <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Tags\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n              <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"External content\"</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n              <span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"When to use the external content?\"</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Now, for each rendered content, Confluenza checks if the <code class=\"language-text\">frontmatter</code> of the corresponding node contains the <code class=\"language-text\">content</code> field. If it does, Confluenza uses the <code class=\"language-text\">childMarkdownRemark</code> to render the page, otherwise it will use the original content. This way, the markdown files with <code class=\"language-text\">frontmatter</code> without the <code class=\"language-text\">content</code> field will be rendered  without any change. If the original file (the one with frontmatter containing the\n<code class=\"language-text\">content</code> field) also contains valid markdown, it will be appended to the end of the external content.</p>\n<blockquote>\n<p>Confluenza will use the title from the frontmatter and will ignore the top-level header in the external content (but currently it requires you to put one).</p>\n</blockquote>\n<h2 id=\"when-to-use-the-external-content\"><a href=\"#when-to-use-the-external-content\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>When to use the external content?</h2>\n<p>Whenever you like! But there are some cases where it really helps.</p>\n<p>Sometimes you want the content of the markdown file to be rendered in various places. For instance you may\nhave a monorepo with a workspace corresponding to an npm package. This workspace will most certainly\ncontain a <code class=\"language-text\">README.md</code> file. You may want to include the content of this file in your Confluenza based\nsite and still let it be rendered by github or npmjs website.</p>\n<p>Now, when rendering the markdown file, Confluenza depends on the so called <code class=\"language-text\">frontmatter</code> containing\nimportant metadata like <code class=\"language-text\">title</code>, <code class=\"language-text\">path</code> and <code class=\"language-text\">tag</code>. These metadata do not have any meaning outside of the\nConfluenza environment and therefore should not be kept e.g. in the actual README file of your npm package.\nThis is not only a cleaner solution (the frontmatter may confuse the reader who is not aware of Confluenza),\nbut also helps sites that do not render the frontmatter correctly (like npmjs).</p>","fileAbsolutePath":"/Users/mczenko/Desktop/nextbuild-2018/nextbuild-2018-monorepo/workspaces/homepage/src/pages/developer-documentation/ExternalContent.md"}}}}},"pageContext":{}}